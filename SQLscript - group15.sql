CREATE DATABASE IF NOT EXISTS `CULTURAL_SEATS` DEFAULT CHARACTER SET = 'UTF8' DEFAULT COLLATE 'UTF8_GENERAL_CI';

USE CULTURAL_SEATS;

CREATE TABLE IF NOT EXISTS `CUSTOMER` (
	`CUSTOMER_ID` INTEGER NOT NULL,
	`FIRST_NAME` VARCHAR(25) NOT NULL,
	`LAST_NAME` VARCHAR(25) NOT NULL,
	`BIRTH_DATE` DATE NOT NULL,
	`GENDER` VARCHAR(15) DEFAULT NULL,
	`NATIONALITY` VARCHAR(20) DEFAULT NULL,
	`ADDRESS_ID` INTEGER NOT NULL,
	`EMAIL` VARCHAR(40) NOT NULL,
	`ID_CARD` VARCHAR (20) NOT NULL,
	`PHONE_NUMBER` VARCHAR(25) NOT NULL,
	`TAX_NUMBER` VARCHAR(20) DEFAULT NULL,
	PRIMARY KEY (`CUSTOMER_ID`)
) ;

CREATE TABLE IF NOT EXISTS `TICKET` (
	`TICKET_ID` INTEGER NOT NULL,
	`CUSTOMER_ID` INTEGER NOT NULL,
	`EVENT_ID` INTEGER NOT NULL,
	`PURCHASE_ID` INTEGER NOT NULL,
	`SECTOR` VARCHAR(30) NOT NULL,
	`PRICE` DECIMAL(6, 2) NOT NULL, 
	`SEAT` VARCHAR(5) DEFAULT NULL,
	PRIMARY KEY (`TICKET_ID`)
) ;

CREATE TABLE IF NOT EXISTS `PAYMENT` ( 
	`PAYMENT_ID` INTEGER NOT NULL, 
	`PURCHASE_ID` INTEGER NOT NULL, 
	`PAYMENT_METHOD` VARCHAR(30) NOT NULL, 
	`DISCOUNTS` DECIMAL(6, 2) DEFAULT 0, 
	PRIMARY KEY (`PAYMENT_ID`) 
) ; 

CREATE TABLE IF NOT EXISTS `EVENT` ( 
	`EVENT_ID` INTEGER NOT NULL, 
	`LOCATION_ID` INTEGER NOT NULL, 
	`DATE` DATE NOT NULL, 
	`HOUR` TIME NOT NULL, 
	`TYPE_OF_EVENT` VARCHAR(30) DEFAULT NULL, 
	`AGE_RANGE` VARCHAR(25) DEFAULT NULL, 
    `PLACES_AVAILABLE` INTEGER NOT NULL,
	PRIMARY KEY (`EVENT_ID`) 
) ; 

CREATE TABLE IF NOT EXISTS `LOCATION` ( 
	`LOCATION_ID` INTEGER NOT NULL, 
	`VENUE` VARCHAR(40) NOT NULL, 
	`CAPACITY` INTEGER NOT NULL, 
	`ADDRESS_ID` INTEGER NOT NULL, 
	PRIMARY KEY (`LOCATION_ID`) 
) ; 

CREATE TABLE IF NOT EXISTS `TICKET_INSURANCE`(
	`INSURANCE_ID` INTEGER NOT NULL,
	`TICKET_ID` INTEGER NOT NULL,
	`TYPE_CLAIM` VARCHAR(50) NOT NULL,
	PRIMARY KEY (`INSURANCE_ID`)
) ;

CREATE TABLE IF NOT EXISTS `DELIVERY` ( 
	`DELIVERY_ID` INTEGER NOT NULL, 
	`ADDRESS_ID` INTEGER DEFAULT NULL, 
	`TYPE_OF_DELIVERY` VARCHAR(15) NOT NULL, 
	`EMAIL` VARCHAR(40) DEFAULT NULL,
	PRIMARY KEY (`DELIVERY_ID`) 
) ; 

CREATE TABLE IF NOT EXISTS `PURCHASE` (
	`PURCHASE_ID` INTEGER NOT NULL,
	`CUSTOMER_ID` INTEGER NOT NULL,
	`DELIVERY_ID` INTEGER NOT NULL,
	`QUANTITY` INTEGER NOT NULL, 
	`PURCHASE_DATE` DATE DEFAULT NULL,
	`RATING` INTEGER DEFAULT NULL,
	PRIMARY KEY (`PURCHASE_ID`) 
) ; 

CREATE TABLE IF NOT EXISTS `ARTIST` ( 
	`ARTIST_ID` INTEGER NOT NULL, 
	`EVENT_ID` INTEGER NOT NULL,
	`ARTIST_NAME` VARCHAR(30) NOT NULL, 
	`PERFORMANCE` VARCHAR(30) NOT NULL, 
	`NATIONALITY` VARCHAR(20) NOT NULL,
	PRIMARY KEY (`ARTIST_ID`) 
) ;

CREATE TABLE IF NOT EXISTS `ADDRESS` ( 
	`ADDRESS_ID` INTEGER NOT NULL, 
	`COUNTRY_ID` CHAR(2) NOT NULL,
	`STREET` VARCHAR(50) NOT NULL,
	`CITY` VARCHAR(30) NOT NULL, 
	`STATE_PROVINCE` VARCHAR(30) DEFAULT NULL, 
	`ZIP_CODE` VARCHAR(12) NOT NULL,
	PRIMARY KEY (`ADDRESS_ID`) 
) ;

CREATE TABLE IF NOT EXISTS `COUNTRY` ( 
	`COUNTRY_ID` CHAR(2) NOT NULL, 
	`COUNTRY_NAME` VARCHAR(40) NOT NULL,
	PRIMARY KEY (`COUNTRY_ID`) 
) ;

INSERT INTO `CUSTOMER` (`CUSTOMER_ID`, `FIRST_NAME`, `LAST_NAME`, `BIRTH_DATE`, `GENDER`, `NATIONALITY`, `ADDRESS_ID`, `EMAIL`, `ID_CARD`, `PHONE_NUMBER`, `TAX_NUMBER`) VALUES     
(100, "JOHN", "HICKMAN", "1999-10-29", "MALE", "GERMAN", 618, "J.HICKMAN@GMAIL.COM", "4820070991", "+49(0)0372058693 ", "981909078"),     
(101, "GEMMA", "MCLEAN", "1975-11-19", "FEMALE", "ENGLISH", 624, "MCLEAN75@HOTMAIL.COM", "9655744701 ", "+44 7700 021754", "412877259"),     
(102, "MARIA", "PRICE", "1995-07-06", "FEMALE", "PORTUGUESE", 623, "MARIAP95@GMAIL.COM", "2667132092 ", "+351 639 230 299 ", "443402245"),     
(103, "BERNARDO", "HUTCHINSON", "2003-05-14", "MALE", "ITALIAN", 601, "BENNY12@GMAIL.COM", "8912879987", "+39 398 893 0289", "834792278"),     
(104, "CALEB", "BIRD", "1986-03-23", "MALE", "DANISH", 627, "CALEBIRD@GMAIL.COM", "2134672285 ", "+45 64 11 24 08", "442424667"), 
(105, "VIVIAN", "SAMPSON", "1996-11-14", "FEMALE", "ROMANIAN", 613, "VISAMPSON14@HOTMAIL.COM", "5175462962", "+40 702 090 388", "543550656"),     
(106, "RUI", "BURGESS", "1988-01-26", "MALE", "BELGIAN", 644, "BURUI88@GMAIL.COM", "0064176266", "+32 483 50 04 64", "725749395"),     
(107, "AUTUMN", "DUNCAN", "1975-02-14", "FEMALE", "SPANISH", 640, "AUTUMNDUNCAN14@GMAIL.COM", "3322473775", "+34 973 90 22 44", "763610111"),    
(108, "CARISSA", "RAY", "1970-01-31", "FEMALE", "NORWEGIAN", 611, "CARISSA70@HOTMAIL.COM", "1242768602", "+47 593 16 538", "758706185"),
(109, "CARLA", "ROMAN", "1972-12-21", "FEMALE", "DANISH", 636, "CARROMAN874@GMAIL.COM", "3962652388 ", "+45 28 21 99 51", "392223379"),     
(110, "OLIVIA", "RAMIREZ", "1978-10-18", "FEMALE", "CROATIAN", 604, "OLIVIARMRIZ78@HOTMAIL.COM", "0524682607", "+385 98 061 6301", "985364301"),     
(111, "BETHANY", "KIRK", "1983-08-30", "FEMALE", "NORWEGIAN", 637, "BETKIRK1983@YAHOO.COM", "4691762132", "+47 596 69 493", "251068321"),     
(112, "MÁRIO", "AGUIRRE", "1973-11-09", "MALE", "ROMANIAN", 612, "MARIGUIRRE@GMAIL.COM", "2914059698", "+40 702 053 945", "274425934"),     
(113, "CURRAN", "WARD", "2002-03-30", "MALE", "SWISS", 641, "CURRANWARD@HOTMAIL.COM", "4634824914 ", "+41 78 583 62 18", "616697766"), 
(114, "JORDAN", "ROBERSON", "1966-10-25", "MALE", "ITALIAN", 602, "JORDNNNNNNN@YAHOO.COM", "9934655209", "+39 314 114 0092", "204887026"),     
(115, "PATRICK", "WISE", "1981-12-17", "MALE", "BELGIAN", 629, "PATRICK1281@GMAIL.COM", "3935548079 ", "+32 451 51 87 80", "957745430"),     
(116, "JADEN", "HORN", "2000-04-21", "MALE", "SWEDISH", 633, "HORN79345@GMAIL.COM", "6554119442", "+46 72 225 39 14", "892034760"),     
(117, "RYAN", "BRITT", "1999-07-11", "MALE", "SWISS", 620, "RYANBRITT99@GMAIL.COM", "2670015395", "+41 75 753 18 57", "352335472"),     
(118, "DÂNIA", "MADDEN", "1987-09-15", "FEMALE", "ITALIAN", 639, "MADANIA@HOTMAIL.COM", "9297509800", "+39 354 805 838", "785574596"),     
(119, "CLARE", "WEAVER", "1983-09-20", "FEMALE", "FINNISH", 607, "CL.83.WEAVER@OUTLOOK.COM", "9909431661", "+358 49 46978", "808485859"),     
(120, "LUCY", "DUFFY", "1974-05-13", "FEMALE", "LUXEMBOURGISH", 609, "LUCY.DAFFY@GMAIL.COM", "3738561250", "+352 628 849 641", "827967775"),     
(121, "RUI", "BISHOP", "1974-11-30", "MALE", "IRISH", 603, "RUIBI_74@HOTMAIL.COM", "7779453049", "+353 82 245 1674", "885609208"),     
(122, "HALLA", "MORGAN", "2003-04-12", "MALE", "SWEDISH", 616, "ALEXIAMORGAN@GMAIL.COM", "9981596957", "+46 79 019 40 29", "415974321"),     
(123, "ASTRA", "BARNES", "1987-12-10", "FEMALE", "DUTCH", 634, "ASTRAAA46BARNES@HOTMAIL.COM", "7212396338 ", "+31 6 33002561", "376151116"),     
(124, "LESLEY", "ROMERO", "1973-07-16", "FEMALE", "LUXEMBOURGISH", 610, "LESLROMERO2@GMAIL.COM", "8441531617", "+352 661 022 699", "287397967"),     
(125, "SOFIA", "MENDONÇA", "1996-03-08", "FEMALE", "FINNISH", 606, "PANDASOFIA@HOTMAIL.COM", "9766343756", "+358 49 468317", "606711423"),     
(126, "SOFIA", "VIEIRA", "2001-09-11", "FEMALE", "CROATIAN", 605, "SOFFVIEIRA@GMAIL.COM", "0214215601", "+385 98 754 382", "886944450"),     
(127, "SUSANA", "DIAS", "1969-07-14", "FEMALE", "SWEDISH", 621, "SU14DIAS@HOTMAIL.COM", "5464958606", "+46 76 803 89 75", "457933160"),    
(128, "BEATRIZ", "SOUSA", "2001-04-16", "FEMALE", "SWISS", 628, "BEASOUSA407@GMAIL.COM", "8676442789", "+41 79 529 97 20", "551155313"),     
(129, "SOFIA", "MENDES", "1970-11-04", "FEMALE", "FRENCH", 630, "ANASOFIAMEN@GMAIL.COM", "7793861175", "+33 6 99 53 37 55", "560406814"); 

INSERT INTO `TICKET` (`TICKET_ID`, `CUSTOMER_ID`, `EVENT_ID`, `PURCHASE_ID`, `SECTOR`, `PRICE`, `SEAT`) VALUES    
(201, 110, 408, 1005, "MIDDLE SEATS FRONT", 30.00, "J15"), 
(202, 102, 421, 1016, "B MIDDLE SEATS", 11.00, "O74"), 
(203, 120, 411, 1019, "SECTOR 4 LEFT", 25.00, "H25"),  
(204, 114, 423, 1002, "A MIDDLE SEATS", 22.00, "A15"),  
(205, 114, 423, 1002, "A MIDDLE SEATS", 22.00, "A16"),
(206, 103, 423, 1009, "VIP", 45.00, NULL), 
(207, 109, 401, 1011, "MIDDLE SEATS BACK", 85.00, "K79"), 
(208, 110, 416, 1010, "VIP", 120.00, NULL),  
(209, 125, 408, 1025, "BOX- POOR VISIBILITY", 25.00, "A74"),  
(210, 118, 407, 1008, "BOX 1- HANDICAP", 32.00, NULL),  
(211, 118, 407, 1008, "BOX 1- HANDICAP", 32.00, NULL),  
(212, 119, 429, 1001, "MIDDLE SEATS FRONT", 25.00, "D18"),  
(213, 127, 426, 1017, "BOX", 27.00, NULL), 
(214, 120, 423, 1029, "B MIDDLE SEATS", 20.00, "K08"), 
(215, 126, 417, 1026, "2ND MIDDLE SEATS", 20.00, "L11"),  
(216, 115, 416, 1030, "3RD BALCONY", 25.00, "T33"),  
(217, 112, 416, 1013, "MIDDLE SEATS BACK", 55.00, "G12"),  
(218, 103, 425, 1028, "SECTOR 4 RIGHT", 70.00, "B490"), 
(219, 109, 420, 1007, "3RD BALCONY", 50.00, "P26"), 
(220, 109, 420, 1007, "3RD BALCONY", 50.00, "P28"),  
(221, 105, 407, 1004, "STANDING", 65.00, NULL),  
(222, 121, 407, 1024, "STANDING", 65.00, NULL),  
(223, 121, 407, 1024, "STANDING", 65.00, NULL),  
(224, 122, 407, 1014, "STANDING", 65.00, NULL),  
(225, 129, 427, 1003, "VIP RIGHT SIDE", 45.00, "G18"),
(226, 110, 417, 1006, "2ND MIDDLE SEATS", 20.00, "N21"),  
(227, 110, 417, 1006, "2ND MIDDLE SEATS", 20.00, "N20"),  
(228, 128, 402, 1015, "BOX", 24.00, "12"),  
(229, 128, 402, 1015, "BOX", 24.00, "12"),  
(230, 102, 420, 1020, "2ND BALCONY", 45.00, "I18"); 

INSERT INTO `COUNTRY` (`COUNTRY_ID`, `COUNTRY_NAME`) VALUES 
("CH", "SWITZERLAND"),  
("FR", "FRANCE"),  
("DE", "GERMANY"),  
("BE", "BELGIUM"),  
("DK", "DENMARK"),   
("IE", "IRELAND"),  
("IT", "ITALY"),  
("NO", "NORWAY"),  
("NL", "NETHERLANDS"),  
("PT", "PORTUGAL"),  
("ES", "SPAIN"),  
("UK", "UNITED KINGDOM"),  
("CR", "CROATIA"),  
("FN", "FINLAND"),  
("LU", "LUXEMBOURG"),  
("RO", "ROMANIA"),  
("SW", "SWEDEN"); 

INSERT INTO `EVENT` (`EVENT_ID`, `LOCATION_ID`, `DATE`, `HOUR`, `TYPE_OF_EVENT`, `AGE_RANGE`, `PLACES_AVAILABLE`) VALUES 
(401, 510, "2019-07-29", "21:00:00", "CONCERT", "OVER 6", 17999),  
(402, 503, "2020-10-03", "21:00:00", "CONCERT", "OVER 6", 5270),  
(403, 501, "2019-11-25", "19:00:00", "DANCE", NULL, 2030),  
(404, 510, "2022-08-14", "22:00:00", "CONCERT", "OVER 6", 18000),  
(405, 502, "2019-03-11", "19:00:00", "CONCERT", "OVER 6", 50035),  
(406, 501, "2020-03-07", "21:00:00", "DANCE", NULL, 2030),  
(407, 508, "2023-11-09", "21:30:00", "THEATER", "OVER 12", 1194),  
(408, 505, "2020-05-02", "21:30:00", "CONCERT", "OVER 6", 1998),  
(409, 506, "2020-03-10", "22:00:00", "STAND-UP COMEDY", "OVER 16", 1350),  
(410, 503, "2019-04-26", "19:00:00", "CONCERT", NULL, 5272),  
(411, 507, "2019-03-09", "17:00:00", "CONCERT", NULL, 1499),  
(412, 502, "2019-02-07", "21:00:00", "CONCERT", "OVER 6", 50035),  
(413, 504, "2020-08-18", "21:30:00", "CONCERT", "OVER 6", 1500),  
(414, 504, "2019-01-09", "22:00:00", "CONCERT", "OVER 6", 1500),  
(415, 509, "2019-09-20", "19:00:00", "CIRCUS", NULL, 20100),  
(416, 512, "2021-01-30", "21:00:00", "THEATER", "OVER 12", 1637),   
(417, 512, "2019-12-12", "21:00:00", "THEATER", "OVER 12", 1637),  
(418, 508, "2019-05-07", "21:00:00", "THEATER", "OVER 12", 1200),  
(419, 513, "2020-08-13", "21:00:00", "THEATER", "OVER 12", 4300),  
(420, 505, "2019-01-24", "21:00:00", "CONCERT", "OVER 6", 1997),  
(421, 511, "2020-04-07", "21:00:00", "CONCERT", "OVER 6", 16999),  
(422, 514, "2020-09-16", "22:00:00", "STAND-UP COMEDY", "OVER 16", 1149),  
(423, 515, "2019-02-19", "19:00:00", "DANCE", NULL, 1742),  
(424, 515, "2020-02-10", "21:00:00", "DANCE", NULL, 1746),  
(425, 506, "2020-01-28", "22:00:00", "STAND-UP COMEDY", "OVER 16", 1349),  
(426, 514, "2020-09-29", "22:00:00", "STAND-UP COMEDY", "OVER 16", 1148),  
(427, 509, "2020-07-15", "21:30:00", "MUSICAL", "OVER 4", 20099),  
(428, 507, "2020-01-14", "18:00:00", "CONCERT", NULL, 1500),  
(429, 511, "2020-05-12", "21:00:00", "CONCERT", "OVER 6", 16999),  
(430, 513, "2019-11-10", "21:00:00", "THEATER", "OVER 12", 4300);

INSERT INTO `LOCATION` (`LOCATION_ID`, `VENUE`, `CAPACITY`, `ADDRESS_ID`) VALUES 
(501, "TEATRO ALLA SCALA", 2030, 625),  
(502, "DRAGON STADIUM", 50035, 614), 
(503, "ROYAL ALBERT HALL", 5272, 608),  
(504, "BATACLAN", 1500, 635),  
(505, "RAZZMATAZZ", 2000, 645),  
(506, "ROCKEFELLER MUSIC HALL", 1350, 638),   
(507, "DOCKS CLUB", 1500, 626),  
(508, "VOLKSHAUS", 1200, 632),  
(509, "ALTICE ARENA", 20100, 646), 
(510, "LANXESS ARENA", 18000, 648), 
(511, "PALAU SANT JORDI", 17000, 652), 
(512, "SAGE GATESHEAD", 1640, 650), 
(513, "COLISEU DOS RECREIOS", 4300, 649), 
(514, "TIVOLI THEATER", 1149, 647), 
(515, "TEATRO REAL", 1746, 651);

INSERT INTO `ADDRESS` (`ADDRESS_ID`, `STREET`, `ZIP_CODE`, `CITY`, `STATE_PROVINCE`, `COUNTRY_ID`) VALUES 
(601, "1297 VIA COLA DI RIE", "989", "ROMA", NULL, "IT"),  
(602, "93091 CALLE DELLA TESTA", "10934", "VENICE", NULL, "IT"),  
(603, "OCONNELL STREET UPPER", "43002", "DUBLIN", NULL, "IE"),  
(604, "ULICA GRADA VUKOVARA 78", "10000", "ZAGREB", NULL, "CR"),  
(605, "SV. KATARINA BB", "52220", "LABIN", NULL, "CR"),  
(606, "POHJOISESPLANADI 2", "00120", "HELSINKI", "UUSIMAA", "FN"),  
(607, "OPINTIE 63", "82500", "KITEE", "NORTH KARELIA", "FN"),  
(608, "KENSINGTON GORE", "SW7 2AP", "LONDON", "SOUTH KENSINGTON", "UK"),  
(609, "4 PLACE DE NANCY", "L-2212", "LUXEMBOURG", NULL, "LU"),  
(610, "1 GRAND-RUE", "L-9710", "CLERVAUX", NULL, "LU"),  
(611, "SIDSEL SIDSERKS VEG 174", "2615", "LILLEHAMMER", NULL, "NO"),  
(612, "STR. VLADIMIRESCU TUDOR 86", "077045", "CHITILA", NULL, "RO"),  
(613, "STRADA GHEORGHE DOJA 8", "205200", "CALAFAT", NULL, "RO"),  
(614, "FUTEBOL CLUBE DO PORTO", "4350-415", "PORTO", NULL, "PT"),  
(615, "12 ARTHUR ST", "2400 8204", "LONDON", NULL, "UK"),  
(616, "GAMLA SVEDALAVÄGEN 32", "510 10", "HORRED", NULL, "SW"),  
(617, "TUVVÄGEN 55", "442 92", "KODE", NULL, "SW"),  
(618, "SCHWANTHALERSTR. 7031", "80925", "MUNICH", "BAVARIA", "DE"),  
(619, "TEGELVIKSGATAN 40", "116 41", "STOCKHOLM", NULL, "SW"),  
(620, "20 RUE DES CORPS-SAINTS", "1730", "GENEVA", "GENEVE", "CH"),  
(621, "DAG HAMMARSKJÖLDS VÄG 31", "115 89", "STOCKHOLM", NULL, "SW"),  
(622, "PIETER BREUGHELSTRAAT 837", "3029SK", "UTRECHT", "UTRECHT", "NL"),  
(623, "TRAVESSA DAS VIRTUDES Nº20","9000-664", "FUNCHAL", NULL, "PT"),  
(624, "9702 CHESTER ROAD", "9629850293", "STRETFORD", "MANCHESTER", "UK"),  
(625, "FILODRAMMATICI 2", "20121", "MILANO", "MILANO", "IT"),  
(626, "SPIELBUDENPL. 19", "20359", "HAMBURG", NULL, "DE"),  
(627, "NYBORGVEJ 17", "1819", "FREDERIKSBERG C", "SJAELLAND", "DK"),  
(628, "MURTENSTRASSE 921", "3095", "BERN", "BE", "CH"),  
(629, "MANDEMAKERSSTRAAT 283", "8840", "WESTROZEBEKE", "WEST FLANDERS", "BE"),  
(630, "55 RUE MARIE DE MÉDICIS", "69300", "CALUIRE-ET-CUIRE", "RHÔNE-ALPES", "FR"),  
(631, "INGE BEISHEIM PLATZ 22", "25308", "ELMSHORN", "SCHLESWIG-HOLSTEIN", "DE"),  
(632, "STAUFFACHERSTRASSE 60", "8004", "ZÜRICH", "ZÜRICH", "CH"),  
(633, "BODBYSUND 77", "540 18", "TIDAN", NULL, "SW"), 
(634, "TOSCASTRAAT 138", "7323", "APELDOORN", "GELDERLAND", "NL"),  
(635, "50 BD VOLTAIRE", "75011", "PARIS", "PARIS", "FR"),  
(636, "NYHAVN 25", "9574", "BAELUM", "NORDJYLLAND", "DK"),  
(637, "VASKERELVEN 129", "5014", "BERGEN", NULL, "NO"),  
(638, "BADSTUGATA 2", "0183", "OSLO", "OSLO", "NO"),  
(639, "VIA SANTA TERESA DEGLI SCALZI 147", "90042", "BORGETTO", "PALERMO", "IT"),  
(640, "AV. ZUMALAKARREGI 99", "03180", "TORREVIEJA", "ALICANTE", "ES"),  
(641, "VIA STAUFFACHER 116", "1307", "VILLARS-LUSSERY", NULL, "CH"),  
(642, "NINSKA 48", "21000", "SPLIT", "SPLIT", "CR"),  
(643, "92 HAREHILLS LANE", "HU20 7UF", "ROWLEY", NULL, "UK"),  
(644, "HOOIVELDEN 76", "7611", "LA GLANERIE", "HAINAUT", "BE"),  
(645, "C- DELS ALMOGÀVERS 122", "08018", "BARCELONA", NULL, "ES"), 
(646, "ROSSIO DOS OLIVAIS", "1990-231", "LISBOA", "LISBOA", "PT"), 
(647, "AV. DA LIBERDADE 182 188", "1250-146", "LISBOA", NULL, "PT"), 
(648, "WILLY-BRANDT-PLATZ 3", "50679", "KÖLN", NULL, "DE"), 
(649, "R. DAS PORTAS DE SANTO ANTÃO 96", "1150-269", "LISBOA", "LISBOA", "PT"), 
(650, "ST MARYS SQUARE", "NE8 2JR", "GATESHEAD", NULL, "UK"), 
(651, "PL. DE ISABEL II", "28013", "MADRID", "MADRID", "ES"),
(652, "PASSEIG OLÍMPIC", "08038", "BARCELONA", NULL, "ES"); 

INSERT INTO `PAYMENT` (`PAYMENT_ID`, `PURCHASE_ID`, `PAYMENT_METHOD`, `DISCOUNTS`) VALUES
(701, 1001, "PAYPAL", 0), 
(702, 1002, "CARD", 0), 
(703, 1003, "CARD", 0), 
(704, 1004, "ATM", 0), 
(705, 1005, "TRANSFER", 3.50), 
(706, 1006, "PAYPAL", 5.00), 
(707, 1007, "ATM", 0), 
(708, 1008, "CARD", 0), 
(709, 1009, "TRANSFER", 3.50), 
(710, 1010, "CARD", 0), 
(711, 1011, "ATM", 0),
(713, 1013, "ATM", 5.00), 
(714, 1014, "TRANSFER", 3.50), 
(715, 1015, "PAYPAL", 0), 
(716, 1016, "TRANSFER", 3.50), 
(717, 1017, "CARD", 0), 
(719, 1019, "ATM", 0), 
(720, 1020, "CARD", 0), 
(724, 1024, "CARD", 0), 
(725, 1025, "CARD", 5.00), 
(726, 1026, "TRANSFER", 3.50), 
(727, 1027, "CARD", 0), 
(728, 1028, "TRANSFER", 0), 
(729, 1029, "CARD", 5.00), 
(730, 1030, "PAYPAL", 0);
 
INSERT INTO `TICKET_INSURANCE` (`INSURANCE_ID`, `TICKET_ID`, `TYPE_CLAIM`) VALUES 
(801, 201, "ILLNESS"),
(802, 203,"THEFT"), 
(803, 204,"ILLNESS"), 
(804, 205,"ILLNESS"), 
(805, 210, "PREMIUM"), 
(806, 211, "PREMIUM"), 
(807, 218, "THEFT"), 
(808, 221, "THEFT"), 
(809, 222, "THEFT"), 
(810, 223, "THEFT"), 
(811, 224, "THEFT"), 
(812, 228, "ILLNESS"), 
(813, 229, "ILLNESS"), 
(814, 207,"PREMIUM"), 
(815, 214, "THEFT"), 
(816, 207, "THEFT"); 
 
INSERT INTO `DELIVERY` (`DELIVERY_ID`, `TYPE_OF_DELIVERY`, `ADDRESS_ID`, `EMAIL`) VALUES
(929, "STORE", 607, NULL), 
(923, "HOME", 602, NULL), 
(927, "EMAIL", NULL, "ANASOFIAMEN@GMAIL.COM"), 
(907, "HOME", 613, NULL), 
(908, "HOME", 604, NULL), 
(920, "HOME", 636, NULL), 
(917, "HOME", 604, NULL), 
(909, "HOME", 639, NULL), 
(924, "EMAIL", NULL, "BENNY12@GMAIL.COM"), 
(916, "HOME", 604, NULL),
(901, "HOME", 636, NULL), 
(918, "EMAIL", NULL, "MARIGUIRRE@GMAIL.COM"), 
(903, "STORE", 616, NULL), 
(902, "HOME", 628, NULL), 
(921, "EMAIL", NULL, "MARIAP95@GMAIL.COM"), 
(926, "HOME", 621, NULL), 
(911, "EMAIL", NULL, "LUCY.DAFFY@GMAIL.COM"), 
(919, "HOME", 623, NULL), 
(905, "STORE", 603, NULL), 
(906, "HOME", 606, NULL), 
(928, "EMAIL", NULL, "SOFFVIEIRA@GMAIL.COM"), 
(925, "EMAIL", NULL, "BENNY12@GMAIL.COM"), 
(922, "HOME", 609, NULL), 
(904, "EMAIL", NULL, "PATRICK1281@GMAIL.COM");

INSERT INTO `PURCHASE` (`PURCHASE_ID`, `CUSTOMER_ID`, `DELIVERY_ID`, `QUANTITY`, `PURCHASE_DATE`, `RATING`) VALUES
(1001, 119, 929, 1, "2020-01-04", NULL),
(1002, 114, 923, 2, "2021-12-23", 5),
(1003, 129, 927, 1, "2019-10-03", 5),
(1004, 105, 907, 1, "2022-11-13", 1),
(1005, 110, 908, 1, "2019-12-01", NULL),
(1006, 110, 917, 2, "2019-09-28", 4),
(1007, 109, 920, 2, "2018-12-18", 5),
(1008, 118, 909, 2, "2022-11-25", 5),
(1009, 103, 924, 1, "2021-12-30", NULL),
(1010, 110, 916, 1, "2020-11-05", 4),
(1011, 109, 901, 1, "2019-01-03", 5),
(1013, 112, 918, 1, "2020-11-16", NULL),
(1014, 122, 903, 1, "2022-10-17", 2),
(1015, 128, 902, 2, "2020-09-05", 3),
(1016, 102, 921, 1, "2019-02-13", 4),
(1017, 127, 926, 1, "2019-09-16", 5),
(1019, 120, 911, 1, "2018-03-12", 5),
(1020, 102, 919, 1, "2018-11-29", NULL),
(1024, 121, 905, 2, "2022-12-01", 4),
(1025, 125, 906, 1, "2019-12-01", 3),
(1026, 126, 928, 1, "2019-06-12", 5),
(1028, 103, 925, 1, "2019-11-19", NULL),
(1029, 120, 922, 1, "2018-10-23", 5), 
(1030, 115, 904, 1, "2020-11-16", 1);

INSERT INTO `ARTIST` (`ARTIST_ID`, `EVENT_ID`, `ARTIST_NAME`, `PERFORMANCE`, `NATIONALITY`) VALUES 
(1101, 401, "COLDPLAY", "CONCERT", "BRITISH"),  
(1102, 402, "HARRY STYLES", "CONCERT", "BRITISH"),  
(1103, 403, "CNB", "DANCE", "PORTUGUESE"), 
(1104, 404, "DUA LIPA", "CONCERT", "BRITISH"),  
(1105, 405, "JAMES BAY", "CONCERT", "BRITISH"),  
(1106, 406, "QUORUM BALLET", "DANCE", "PORTUGUESE"), 
(1107, 407, "JENNIFER ANISTON", "THEATER", "AMERICAN"),  
(1108, 408, "ROSALIA", "CONCERT", "SPANISH"), 
(1109, 409, "KEVIN HART", "STAND-UP COMEDY", "AMERICAN"),  
(1110, 410, "BILLIE EILISH", "CONCERT", "AMERICAN"), 
(1111, 411, "DIOGO PIÇARRA", "CONCERT", "PORTUGUESE"),  
(1112, 412, "ED SHEERAN", "CONCERT", "BRITISH"), 
(1113, 413, "RUSS", "CONCERT", "AMERICAN"), 
(1114, 414, "6LACK", "CONCERT", "AMERICAN"),  
(1115, 415, "CIRQUE DU SOLEIL", "CIRCUS", "CANADIAN"),  
(1116, 416, "JULIA ROBERTS", "THEATER", "AMERICAN"), 
(1117, 417, "GEORGE CLOONEY", "THEATER", "AMERICAN"),  
(1118, 418, "BRAD PITT", "THEATER", "AMERICAN"), 
(1119, 419, "PATRÍCIA TAVARES", "THEATER", "PORTUGUESE"),  
(1120, 420, "CAMILA CABELLO", "CONCERT", "CUBAN-AMERICAN"), 
(1121, 421, "TRAVIS SCOTT", "CONCERT", "AMERICAN"), 
(1122, 422, "JOANA MARQUES", "STAND-UP COMEDY", "PORTUGUESE"), 
(1123, 423, "SYDNEY DANCE COMPANY", "DANCE", "AUSTRALIAN"),
(1124, 424, "RUSSIAN BALLET", "DANCE", "RUSSIAN"), 
(1125, 425, "DAVE CHAPPELLE", "STAND-UP COMEDY", "AMERICAN"), 
(1126, 426, "SALVADOR MARTINHA", "STAND-UP COMEDY", "PORTUGUESE"),  
(1127, 427, "CATS", "MUSICAL", "AMERICAN"), 
(1128, 428, "CAROLINA DESLANDES", "CONCERT", "PORTUGUESE"),
(1129, 429, "SAM SMITH", "CONCERT", "BRITISH"), 
(1130, 430, "DIOGO MORGADO", "THEATER", "PORTUGUESE"); 

# RELATIONSHIPS
SET FOREIGN_KEY_CHECKS = 0;

ALTER TABLE `CULTURAL_SEATS`.`ADDRESS` 
ADD INDEX `FK_ADDRESS_COUNTRY1_IDX` (`COUNTRY_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`ARTIST` 
ADD INDEX `FK_ARTIST_EVENT1_IDX` (`EVENT_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`CUSTOMER` 
ADD INDEX `FK_CUSTOMER_ADDRESS1_IDX` (`ADDRESS_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`DELIVERY` 
ADD INDEX `FK_DELIVERY_ADDRESS1_IDX` (`ADDRESS_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`EVENT` 
ADD INDEX `FK_EVENT_LOCATION1_IDX` (`LOCATION_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`LOCATION` 
ADD INDEX `FK_LOCATION_ADDRESS1_IDX` (`ADDRESS_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`PAYMENT` 
ADD INDEX `FK_PAYMENT_PURCHASE1_IDX` (`PURCHASE_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`PURCHASE` 
ADD INDEX `FK_PURCHASE_CUSTOMER1_IDX` (`CUSTOMER_ID` ASC) VISIBLE,
ADD INDEX `FK_PURCHASE_DELIVERY1_IDX` (`DELIVERY_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`TICKET` 
ADD INDEX `FK_TICKET_CUSTOMER_IDX` (`CUSTOMER_ID` ASC) VISIBLE,
ADD INDEX `FK_TICKET_PURCHASE1_IDX` (`PURCHASE_ID` ASC) VISIBLE,
ADD INDEX `FK_TICKET_EVENT1_IDX` (`EVENT_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`TICKET_INSURANCE` 
ADD INDEX `FK_TICKET_INSURANCE_TICKET1_IDX` (`TICKET_ID` ASC) VISIBLE;
;

ALTER TABLE `CULTURAL_SEATS`.`ADDRESS` 
ADD CONSTRAINT `FK_ADDRESS_COUNTRY1`
	FOREIGN KEY (`COUNTRY_ID`)
	REFERENCES `CULTURAL_SEATS`.`COUNTRY` (`COUNTRY_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

ALTER TABLE `CULTURAL_SEATS`.`ARTIST` 
ADD CONSTRAINT `FK_ARTIST_EVENT1`
	FOREIGN KEY (`EVENT_ID`)
	REFERENCES `CULTURAL_SEATS`.`EVENT` (`EVENT_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

ALTER TABLE `CULTURAL_SEATS`.`CUSTOMER` 
ADD CONSTRAINT `FK_CUSTOMER_ADDRESS1`
	FOREIGN KEY (`ADDRESS_ID`)
	REFERENCES `CULTURAL_SEATS`.`ADDRESS` (`ADDRESS_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

ALTER TABLE `CULTURAL_SEATS`.`DELIVERY` 
ADD CONSTRAINT `FK_DELIVERY_ADDRESS1`
	FOREIGN KEY (`ADDRESS_ID`)
	REFERENCES `CULTURAL_SEATS`.`ADDRESS` (`ADDRESS_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

ALTER TABLE `CULTURAL_SEATS`.`EVENT` 
ADD CONSTRAINT `FK_EVENT_LOCATION1`
	FOREIGN KEY (`LOCATION_ID`)
	REFERENCES `CULTURAL_SEATS`.`LOCATION` (`LOCATION_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

ALTER TABLE `CULTURAL_SEATS`.`LOCATION` 
ADD CONSTRAINT `FK_LOCATION_ADDRESS1`
	FOREIGN KEY (`ADDRESS_ID`)
	REFERENCES `CULTURAL_SEATS`.`ADDRESS` (`ADDRESS_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

ALTER TABLE `CULTURAL_SEATS`.`PAYMENT` 
ADD CONSTRAINT `FK_PAYMENT_PURCHASE1`
	FOREIGN KEY (`PURCHASE_ID`)
	REFERENCES `CULTURAL_SEATS`.`PURCHASE` (`PURCHASE_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

ALTER TABLE `CULTURAL_SEATS`.`PURCHASE` 
ADD CONSTRAINT `FK_PURCHASE_CUSTOMER1`
	FOREIGN KEY (`CUSTOMER_ID`)
	REFERENCES `CULTURAL_SEATS`.`CUSTOMER` (`CUSTOMER_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION,
ADD CONSTRAINT `FK_PURCHASE_DELIVERY1`
	FOREIGN KEY (`DELIVERY_ID`)
	REFERENCES `CULTURAL_SEATS`.`DELIVERY` (`DELIVERY_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

ALTER TABLE `CULTURAL_SEATS`.`TICKET` 
ADD CONSTRAINT `FK_TICKET_CUSTOMER`
	FOREIGN KEY (`CUSTOMER_ID`)
	REFERENCES `CULTURAL_SEATS`.`CUSTOMER` (`CUSTOMER_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION,
ADD CONSTRAINT `FK_TICKET_PURCHASE1`
	FOREIGN KEY (`PURCHASE_ID`)
	REFERENCES `CULTURAL_SEATS`.`PURCHASE` (`PURCHASE_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION,
ADD CONSTRAINT `FK_TICKET_EVENT1`
	FOREIGN KEY (`EVENT_ID`)
	REFERENCES `CULTURAL_SEATS`.`EVENT` (`EVENT_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

ALTER TABLE `CULTURAL_SEATS`.`TICKET_INSURANCE` 
ADD CONSTRAINT `FK_TICKET_INSURANCE_TICKET1`
	FOREIGN KEY (`TICKET_ID`)
	REFERENCES `CULTURAL_SEATS`.`TICKET` (`TICKET_ID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;
  
  

# QUERIES--------------------------------------------------------------------------------------------------------

# F1------------------------------------------------------------------------------------------------------------
#EXPLAIN
SELECT CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS CUSTOMER_NAME, P.PURCHASE_DATE, T.TICKET_ID AS TICKET, E.TYPE_OF_EVENT 
FROM CUSTOMER AS C 
JOIN PURCHASE AS P ON C.CUSTOMER_ID = P.CUSTOMER_ID
JOIN TICKET AS T ON T.PURCHASE_ID = P.PURCHASE_ID
JOIN EVENT AS E ON T.EVENT_ID = E.EVENT_ID
WHERE P.PURCHASE_DATE BETWEEN '2020-01-01' AND '2020-12-31'
;
# IF WE USE THIS QUERY THE SERVER HAS TO LOOK INTO THE WHOLE PURCHASE TABLE IN ORDER TO FILTER THE RIGHT PURCHASES SINCE WE ARE FILTERING BY DATES
# WE CAN ADD AN INDEX, TO THE PURCHASE TABLE IN THE PURCHASE_DATE COLUMN, AS IT IS THE ONE WITH THE HIGHEST CARDINALITY

ALTER TABLE PURCHASE ADD INDEX (PURCHASE_DATE);
#EXPLAIN
SELECT CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS CUSTOMER_NAME, P.PURCHASE_DATE, T.TICKET_ID AS TICKET, E.TYPE_OF_EVENT 
FROM CUSTOMER AS C 
JOIN PURCHASE AS P ON C.CUSTOMER_ID = P.CUSTOMER_ID
JOIN TICKET AS T ON T.PURCHASE_ID = P.PURCHASE_ID
JOIN EVENT AS E ON T.EVENT_ID = E.EVENT_ID
WHERE P.PURCHASE_DATE BETWEEN '2020-01-01' AND '2020-12-31'
;
# USING THE EXPLAIN KEY WORD AGAIN WE CAN SEE THAT NOW, USING THE INDEX, THE FILTRATION IS MORE EFFICIENT (WE ONLY LOOK AT 5 ROWS IN THE PURCHASE TABLE)


# F2-------------------------------------------------------------------------------------------------------------
# WE CONSIDERED THE BEST CUSTOMERS AS BEING THE ONES THAT BOUGHT MORE TICKETS FOR DIFFERENT EVENTS
#EXPLAIN
SELECT CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS CUSTOMER_NAME, 
 COUNT(DISTINCT E.EVENT_ID) AS NUM_EVENTS, SUM(P.QUANTITY * T.PRICE) AS VALUE_SPENT
FROM CUSTOMER AS C
JOIN TICKET AS T ON C.CUSTOMER_ID = T.CUSTOMER_ID
JOIN EVENT AS E ON E.EVENT_ID = T.EVENT_ID
JOIN PURCHASE AS P ON P.PURCHASE_ID = T.PURCHASE_ID
GROUP BY C.CUSTOMER_ID
ORDER BY NUM_EVENTS DESC, VALUE_SPENT DESC
LIMIT 3
;
# DUE TO THE CRITERIA DEFINED ABOVE, WE HAVE TO LOOK AT 4 DIFFERENT TABLES IN ORDER TO SELECT THE BEST CUSTOMERS
# SO, WE CAN SEE THAT THE FILTERING OPERATION HAS TO LOOK AT THE WHOLE TICKET TABLE (WHICH IS NOT TOTALLY EFFICIENT)
# IF WE HAD A VARIABLE IN THE CUSTOMER TABLE THAT STORED THE NUMBER OF DIFFERENT EVENTS PER CUSTOMER, WE COULD 
# CREATE AN INDEX IN THAT COLUMN, FOR THE FIRST FILTERING OPERATION TO BECOME FASTER (IN THIS CASE, WE WOULD
# NOT LOOK FOR THE CUSTOMERS THAT BOUGHT TICKETS FOR JUST 1 EVENT). AFTER THAT WE STILL HAD TO TO THE CALCULATION
# FOR THE VALUE_SPENT (AS IT IS OUR TIEBREAKER CRITERIA)



# F3-----------------------------------------------------------------------------------------------------------
#EXPLAIN
SELECT '01/2018 - 12/2020' AS PERIOD_SALES, SUM(T.PRICE) AS TOTAL_SALES, 
 SUM(T.PRICE)/3 AS YEARLY_AVERAGE, SUM(T.PRICE)/36 AS MONTHLY_AVERAGE
FROM PURCHASE AS P
JOIN TICKET AS T ON T.PURCHASE_ID = P.PURCHASE_ID
WHERE P.PURCHASE_DATE BETWEEN '2018-01-01' AND '2020-12-31'
;
# AS WE CAN SEE THE NUMBER OF ROWS THAT NEEDED TO BE LOOKED TO PERFORM THE FILTERING IS ONLY 18 NOW 
# (THE NUMBER OF PURCHASES THAT HAPPENED BETWEEN THOSE DATES)
# SINCE WE CREATED AN INDEX IN THE PURCHASE_DATE IN QUESTION F1



# F4-----------------------------------------------------------------------------------------------------------
# WE CONSIDERED THE GEOGRAPHICAL LOCATIONS (COUNTRIES) OF CUSTOMERS SINCE IT IS MORE IMPORTANT TO KNOW WHERE OUR CUSTOMERS ARE FROM
# THAN WHERE ARE THE EVENTS HAPPENING (THE PURPOSE OF OUR BUSINESS IS TO SELL TICKETS AND NOT ORGANIZE EVENTS)
EXPLAIN
SELECT CO.COUNTRY_NAME, SUM(T.PRICE) AS SUM_SALES
FROM COUNTRY AS CO
JOIN ADDRESS AS A ON A.COUNTRY_ID = CO.COUNTRY_ID
JOIN CUSTOMER AS C ON C.ADDRESS_ID = A.ADDRESS_ID
JOIN TICKET AS T ON T.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY CO.COUNTRY_NAME
ORDER BY SUM_SALES DESC
;
# AGAIN, TO GET THE COUNTRIES AND THE TOTAL SALES, WE HAVE TO LOOK AT 4 DIFFERENT TABLES
# MEANING THAT THE FILTERING OPERATION HAS TO LOOK AT THE WHOLE TICKET TABLE SINCE IT IS THE ONE THAT CONTAINS THE 
# PRICE THAT IS NEEDED TO CALCULATE THE TOTAL SALES FOR EACH COUNTRY



# F5------------------------------------------------------------------------------------------------------------
# WE CONSIDERED THE AVERAGE RATING FOR EACH COUNTRY WHERE THE CUSTOMERS BOUGHT TICKETS
#EXPLAIN
SELECT CO.COUNTRY_NAME, AVG(P.RATING) AS AVERAGE_RATING
FROM COUNTRY AS CO
JOIN ADDRESS AS A ON A.COUNTRY_ID = CO.COUNTRY_ID
JOIN CUSTOMER AS C ON C.ADDRESS_ID = A.ADDRESS_ID
JOIN PURCHASE AS P ON P.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY CO.COUNTRY_NAME
ORDER BY AVERAGE_RATING DESC
;
# LOOKING AT THE EXPLAIN OUTPUT, WE SEE THAT THE FILTERING HAS TO LOOK TO ALL THE ROWS ON THE PURCHASE TABLE
# IF THE PURCHASE TABLE HAS NULL RATINGS THE SERVER WOULD STILL HAVE TO LOOK AT ALL THE 
# ROWS WHICH IS NOT EFFICIENT

# SO WE CAN CREATE AN INDEX IN THE PURCHASE TABLE TO SORT IT BY RATING
ALTER TABLE PURCHASE ADD INDEX (RATING);

# AS WE CAN SEE HERE, NOW THE FILTERING OPERATION ONLY HAS TO LOOK AT THE NON-NULL VALUES (24 ROWS IN THE PURCHASE
# TABLE)
EXPLAIN
SELECT CO.COUNTRY_NAME, AVG(P.RATING) AS AVERAGE_RATING
FROM COUNTRY AS CO
JOIN ADDRESS AS A ON A.COUNTRY_ID = CO.COUNTRY_ID
JOIN CUSTOMER AS C ON C.ADDRESS_ID = A.ADDRESS_ID
JOIN PURCHASE AS P ON P.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY CO.COUNTRY_NAME
ORDER BY AVERAGE_RATING DESC
;



# VIEWS OF THE INVOICE-------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW INVOICE_HEAD_TOTALS AS 
SELECT (P.PURCHASE_ID - 1000) AS INVOICE_NUMBER, P.PURCHASE_DATE AS DATE_OF_ISSUE, 
 CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS CLIENT_NAME,
 A.STREET AS STREET_ADDRESS, A.CITY AS CITY, A.STATE_PROVINCE AS STATE,
 CO.COUNTRY_NAME AS COUNTRY, A.ZIP_CODE AS ZIP_CODE, SUM(P.QUANTITY * T.PRICE) AS SUB_TOTAL,
 "CULTURAL_SEATS" AS COMPANY_NAME, "GERAL@CULTURALSEATS.PT" AS COMPANY_EMAIL,
 "CAMPUS DE CAMPOLIDE, 1070-312 LISBOA, PORTUGAL" AS COMPANY_ADDRESS,
 PA.DISCOUNTS AS DISCOUNT, "6%" AS TAX_RATE, ROUND(SUM(P.QUANTITY * T.PRICE) * 0.06, 2) AS TAX,
 ROUND(SUM(P.QUANTITY * T.PRICE) * 1.06 - PA.DISCOUNTS, 2) AS TOTAL,
 ROUND(SUM(P.QUANTITY * T.PRICE) * 1.06 - PA.DISCOUNTS, 2) AS INVOICE_TOTAL
FROM CUSTOMER AS C
JOIN ADDRESS AS A ON C.ADDRESS_ID = A.ADDRESS_ID
JOIN COUNTRY AS CO ON A.COUNTRY_ID = CO.COUNTRY_ID
JOIN PURCHASE AS P ON P.CUSTOMER_ID = C.CUSTOMER_ID
JOIN TICKET AS T ON T.PURCHASE_ID = P.PURCHASE_ID
JOIN PAYMENT AS PA ON PA.PURCHASE_ID = P.PURCHASE_ID
GROUP BY INVOICE_NUMBER
;

CREATE OR REPLACE VIEW INVOICE_DETAILS AS 
SELECT (P.PURCHASE_ID - 1000) AS INVOICE_NUMBER, 
 CONCAT('TICKET N.', T.TICKET_ID, ' ', E.TYPE_OF_EVENT, ' OF THE ARTIST ', A.ARTIST_NAME) AS DESCRIPTION, 
 T.PRICE AS UNIT_COST, '1' AS QUANTITY, T.PRICE AS AMOUNT
FROM TICKET AS T
JOIN EVENT AS E ON E.EVENT_ID = T.EVENT_ID
JOIN ARTIST AS A ON A.EVENT_ID = E.EVENT_ID
JOIN PURCHASE AS P ON P.PURCHASE_ID = T.PURCHASE_ID
;

# EXAMPLE OF SEEING AN INVOICE
SELECT * 
FROM INVOICE_DETAILS
WHERE INVOICE_NUMBER = 3;



# TRIGGER 1--------------------------------------------------------------------------------------------------------

DELIMITER $$
CREATE TRIGGER AFTER_TICKET_INSERT
AFTER INSERT
ON TICKET
FOR EACH ROW
BEGIN
	UPDATE EVENT
    INNER JOIN TICKET ON TICKET.EVENT_ID = EVENT.EVENT_ID
    SET PLACES_AVAILABLE = PLACES_AVAILABLE - 1
    WHERE TICKET_ID = NEW.TICKET_ID;
END $$
DELIMITER ;

# HERE WE CAN SEE ON EVENT 408 THE NUMBER OF PLACES AVAILABLE IS 1997
SELECT *
FROM EVENT;

INSERT INTO `TICKET` (`TICKET_ID`, `CUSTOMER_ID`, `EVENT_ID`, `PURCHASE_ID`, `SECTOR`, `PRICE`, `SEAT`) VALUES    
(231, 110, 408, 1005, "MIDDLE SEATS FRONT", 30.00, "J19");

# AFTER WE INSERT A TICKET FOR THIS EVENT WE CAN SEE THE NUMBER OF PLACES AVAILABLE IS ONLY 1996
SELECT *
FROM EVENT;


# TRIGGER 2--------------------------------------------------------------------------------------------------------

# THE OBJECTIVE OF OUR COMPANY IS NOT ONLY TO PROVIDE THE BEST SERVICE TO OUR EXISTING CUSTOMERS, BUT ALSO TO ATRACT NEW ONES. 
# SO, WE USUALLY GIVE A 10% DISCOUNT TO THE FIRST BUY OF THE CUSTOMERS
# IN ORDER TO KEEP TRACK OF THE NEW CUSTOMERS WE INSERT A LINE IN A LOG TABLE, EVERYTIME A CUSTOMER IS INSERTED IN OUR DATABASE

CREATE TABLE IF NOT EXISTS `LOG` (
	`LOG_ID` INTEGER UNSIGNED AUTO_INCREMENT,
	`TIME` DATETIME,
    `CUSTOMER_ID` INTEGER,
	`NAME_CUSTOMER` VARCHAR(50),
	`EMAIL` VARCHAR(40),
    `SENT_STATUS` VARCHAR(3), # YES IF AN EMAIL WITH THE DISCOUNT WAS ALREADY SENT TO THIS NEW CUSTOMER AND NO OTHERWISE
    `USED_DISCOUNT` VARCHAR(3), # YES IF THE CUSTOMER ALREADY USED THE DISCOUNT AND NO OTHERWISE
    PRIMARY KEY (`LOG_ID`)
) ;

# HERE WE HAVE THE CREATED LOG TABLE THAT IS EMPTY
SELECT *
FROM LOG;

DELIMITER $$
CREATE TRIGGER AFTER_CUSTOMER_INSERT
AFTER INSERT
ON CUSTOMER
FOR EACH ROW
BEGIN
	INSERT INTO `LOG` (`TIME`, `CUSTOMER_ID`, `NAME_CUSTOMER`, `EMAIL`, `SENT_STATUS`, `USED_DISCOUNT`) VALUES
	(NOW(), NEW.CUSTOMER_ID, CONCAT(NEW.FIRST_NAME, ' ', NEW.LAST_NAME), NEW.EMAIL, 'NO', 'NO');
END $$
DELIMITER ;

# WHEN WE INSERT A NEW CUSTOMER
INSERT INTO `CUSTOMER` (`CUSTOMER_ID`, `FIRST_NAME`, `LAST_NAME`, `BIRTH_DATE`, `GENDER`, `NATIONALITY`, `ADDRESS_ID`, `EMAIL`, `ID_CARD`, `PHONE_NUMBER`, `TAX_NUMBER`) VALUES    
(130, "FICTITIOUS", "PERSON", "1990-10-29", "MALE", "GERMAN", 618, "FPERSON@GMAIL.COM", "4820952991", "+49(0)0372093693 ", "981936078");

# THE LOG TABLE HAS A NEW OBSERVATION WITH THE DETAILS
SELECT * 
FROM LOG;



# --------------------------------------------------------------------------------------------------------
# IF WE WANTED TO REGISTER THAT WE ALREADY SENT THE EMAIL WITH THE DISCOUNT WE DO THIS 
UPDATE LOG
SET SENT_STATUS = "YES"
WHERE LOG_ID = 1;